The general rule: use variables for external configuration and locals for internal computation and organization. 
This keeps your modules clean, reusable, and maintainable.

Usecases:
1. Input Processing with Locals

variable "databases" {
  description = "Database configurations"
  type = map(object({
    engine      = string
    size        = string
    multi_az    = optional(bool, false)
  }))
}

locals {
  # Process and validate input
  database_configs = {
    for name, config in var.databases : name => {
      engine           = config.engine
      instance_class   = config.size == "small" ? "db.t3.micro" : "db.t3.large"
      multi_az         = var.environment == "prod" ? true : config.multi_az
      backup_retention = var.environment == "prod" ? 30 : 7
    }
  }
}

resource "aws_db_instance" "databases" {
  for_each = local.database_configs
  
  identifier     = "${var.environment}-${each.key}"
  engine         = each.value.engine
  instance_class = each.value.instance_class
  multi_az       = each.value.multi_az
  
  tags = local.common_tags
}

2. Environment-Specific Logic

variable "environment" {
  type = string
}

locals {
  # Environment-specific configurations
  config = {
    dev = {
      instance_count = 1
      instance_type  = "t3.micro"
      enable_backups = false
    }
    staging = {
      instance_count = 2
      instance_type  = "t3.small"
      enable_backups = true
    }
    prod = {
      instance_count = 3
      instance_type  = "t3.large"
      enable_backups = true
    }
  }
  
  current_config = local.config[var.environment]
}

